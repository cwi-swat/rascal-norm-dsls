#include "../ndec.clingo".

% model

% #domain person(Person).
% #domain person(Parent).
% #domain person(Child).

natural_parent(Parent,Child)  :- person(Parent), person(Child). 
adoptive_parent(Parent,Child) :- person(Parent), person(Child). 
legal_parent(Parent,Child)    :- person(Parent), person(Child). 

derivedAt(legal_parent(Parent,Child),T) :- derivedAt(natural_parent(Parent,Child),T).
derivedAt(legal_parent(Parent,Child),T) :- derivedAt(adoptive_parent(Parent,Child),T).

derivedAt(parentship,T) :- not 1{derivedAt(legal_parent(P,P),T) : person(P)}, time(T).
invariantViolatedAt(parentship,T) :- time(T), not derivedAt(parentship,T).

in_school(Child) :- person(Child).
is_parent(Parent) :- person(Parent).
homework_due(Child) :- person(Child).
derivedAt(is_parent(Parent),T) :- time(T), person(Parent), person(Child), derivedAt(legal_parent(Parent,Child),T).

event(join_school(C)) :- person(C).
possibleAt(join_school(Child),T) :- time(T), person(Child),
  not derivedAt(in_school(Child),T), 
  not derivedAt(is_parent(Child),T).
initiatesAt(join_school(Child), in_school(Child), T) :- time(T), person(Child).

derivedAt(parents_not_in_school,T) :- time(T),
  not 1{derivedAt(legal_parent(P1,P2),T) : person(P1), person(P2), derivedAt(in_school(P1),T)}.
invariantViolatedAt(parents_not_in_school,T) :- time(T),
  not derivedAt(parents_not_in_school,T).

action(ask_for_help(C,P)) :- person(C), person(P), C!=P.
actor_of(ask_for_help(C,P),C) :- person(C), person(P), C!=P.
initiatesAt(ask_for_help(Child,Parent),help_with_homework(Parent,Child),T) :- 
  time(T), person(Parent), person(Child), Child!=Parent.
possibleAt(ask_for_help(C,P),T) :- person(C), person(P), C!=P, time(T).
permission(ask_for_help(Child,Parent)) :- person(Child), person(Parent), Child!=Parent.
permission_of_act(ask_for_help(C,P),ask_for_help(C,P)) :- person(C), person(P), C!=P.
derivedAt(ask_for_help(C,P),T) :- person(C), person(P), C!=P, time(T),
  derivedAt(legal_parent(P,C),T),
  not derivedAt(homework_due(C),T),
  not derivedAt(help_with_homework(P,C),T).
holder(ask_for_help(Child,Parent),Child) :- person(Child), person(Parent).
claimant(ask_for_help(Child,Parent),Parent) :- person(Parent), person(Child).

event(homework_deadline).
possibleAt(homework_deadline,T) :- time(T).
initiatesAt(homework_deadline,homework_due(Child),T) :- time(T), person(Child),
  derivedAt(in_school(Child),T).

obligation(help_with_homework(P,C)) :- person(P), person(C), C!=P.
holder(help_with_homework(P,C),P) :- person(P), person(C).
claimant(help_with_homework(P,C),C) :- person(P), person(C).
violation_cond(help_with_homework(P,C), homework_due(C)) :- person(C), person(P), P!=C.
obligation_of_act(help_with_homework(P,C),help(P,C)) :- person(P), person(C), P!=C.

action(help(P,C)) :- person(P), person(C), C!=P.
actor_of(help(P,C),P) :- person(P), person(C), C!= P.
possibleAt(help(P,C),T) :- person(P), person(C), C!=P, time(T).
permission(help(P,C)) :- person(P), person(C), C!=P, time(T).
permission_of_act(help(P,C),help(P,C)) :- person(P), person(C), C!=P.
derivedAt(help(P,C),T) :- person(P), person(C), C!=P, time(T),
  derivedAt(legal_parent(P,C),T).
holder(help(P,C),P) :- person(P), person(C), C!=P.
claimant(help(P,C),C) :- person(P), person(C), C!=P.
  
event(new_homework).  
possibleAt(new_homework,T) :- time(T).
terminatesAt(new_homework, homework_due(Child), T) :- time(T), homework_due(Child).

% verification

safetyViolatedAt(parent_fairness,T) :- person(C), person(P), C!=P, 
  happensAt(ask_for_help(C,P),T), derivedAt(homework_due(C),T+1).
  
% refinement
person(alice).
person(bob).
person(chloe).
person(david).
  
% initial state
initial(natural_parent(alice,bob)).
initial(adoptive_parent(chloe,david)).
% initial(adoptive_parent(david,david)).
  
% scenario 

time(0..6).
triggerAt(join_school(bob),0).
triggerAt(join_school(david),0).
triggerAt(ask_for_help(bob,alice),1).
triggerAt(help(alice,bob),2).
triggerAt(homework_deadline,3).
triggerAt(new_homework,3).
1{triggerAt(homework_deadline,4..5)}1. % explore all scenarios with 4 OR 5
triggerAt(ask_for_help(bob,alice),5).
triggerAt(help(alice,bob),6).

% #show derivedAt/2.
#show violatedAt/2.
#show invariantViolatedAt/2.
#show safetyViolatedAt/2.
